<?xml version="1.0" encoding="UTF-8"?>

<templateDomain name="APIRequestAnomalyAnalysis">
  <description>Alerting anomalies of api resquests</description>
  <templates>
    <template name="Request Anomaly Detector">
      <description>Abnormal request count alerting</description>
      <executionPlan><![CDATA[
                                /* Enter a unique ExecutionPlan */
                                @Plan:name('APIRequestExecutionPlan')

                                /* Enter a unique description for ExecutionPlan */
                                -- @Plan:description('ExecutionPlan')

                                /* define streams/tables and write queries here ... */


                                @Import('org.wso2.apimgt.statistics.request:1.0.0')
                                define stream requestStream (meta_clientType string, consumerKey string, context string, api_version string, api string, resourcePath string, method string, version string, request int, requestTime long, userId string, tenantDomain string, hostName string, apiPublisher string, applicationName string, applicationId string, userAgent string, tier string, throttledOut bool);

                                @Export('abnormalRequestsPerMinAlertStream:1.0.0')
                                define stream abnormalRequestsPerMinAlertStream (api string, userId string, requestsPerMin long, requestsPerMinPercentile double);

                                @from(eventtable = 'analytics.table' , table.name = 'REQUEST_PERCENTILE_TABLE',  primary.keys = 'api_version,userId')
                                define table requestPercentileTable (api_version string, userId string, requestsPerMinPercentile double);


                                @info(name = 'query1') 
                                from requestStream
                                select api_version, userId 
                                insert into requestSummaryStream ;


                                @info(name = 'query2') 
                                from requestSummaryStream#window.timeBatch(1 minute)
                                select api_version, userId ,  count() as requestsPerMin 
                                group by api_version, userId    
                                insert into requestCountStream ;

                                @info(name = 'query3') 
                                from requestCountStream#window.timeBatch(1 day)
                                select api_version, userId ,  avg(requestsPerMin) as avgRequestsPerMin, stddev(requestsPerMin) as sdRequestsPerMin  
                                group by api_version, userId   
                                insert into requestStatStream ;

                                @info(name = 'query4') 
                                from requestStatStream  
                                select api_version, userId , analytics:percentile(avgRequestsPerMin, sdRequestsPerMin, $requestsPerMinutePercentile) as requestsPerMinPercentile     
                                insert into requestPercentileTable;


                                @info(name = 'query5') 
                                from requestSummaryStream#window.time(1 min) 
                                select  api_version, userId,  count() as  requestsPerMin  
                                group by api_version, userId   
                                insert into requestPerMinuteStream;

                                @info(name = 'query6') 
                                from requestPerMinuteStream join requestPercentileTable  
                                on (requestPerMinuteStream.api_version ==requestPercentileTable.api_version and  requestPerMinuteStream.userId ==requestPercentileTable.userId)
                                select requestPerMinuteStream.api_version as api , requestPerMinuteStream.userId , requestPerMinuteStream.requestsPerMin,  requestPercentileTable.requestsPerMinPercentile  
                                having (requestsPerMin > requestsPerMinPercentile)
                                insert into abnormalRequestsPerMinAlertStream;
                                 ]]></executionPlan>
      <parameters>
        <parameter name="requestsPerMinutePercentile" type="int">
          <displayName>percentile</displayName>
          <description>Alert if the request count per minute lies outside the given percentile value</description>
          <defaultValue>95</defaultValue>
        </parameter>
      </parameters>
    </template>
  </templates>
  <streams>
    <stream>                          
                        {
                          "streamId": "abnormalRequestsPerMinAlertStream:1.0.0",
                          "name": "abnormalRequestsPerMinAlertStream",
                          "version": "1.0.0",
                          "nickName": "",
                          "description": "",
                          "payloadData": [
                            {
                              "name": "api",
                              "type": "STRING"
                            },
                            {
                              "name": "userId",
                              "type": "STRING"
                            },
                            {
                              "name": "requestsPerMin",
                              "type": "LONG"
                            },
                            {
                              "name": "requestsPerMinPercentile",
                              "type": "DOUBLE"
                            }
                          ]
                        }                                       
    </stream>
    <stream>
                        {
                          "streamId": "org.wso2.apimgt.statistics.request:1.0.0",
                          "name": "org.wso2.apimgt.statistics.request",
                          "version": "1.0.0",
                          "nickName": "API Manager Request Data",
                          "description": "Request Data",
                          "metaData": [
                            {
                              "name": "clientType",
                              "type": "STRING"
                            }
                          ],
                          "payloadData": [
                            {
                              "name": "consumerKey",
                              "type": "STRING"
                            },
                            {
                              "name": "context",
                              "type": "STRING"
                            },
                            {
                              "name": "api_version",
                              "type": "STRING"
                            },
                            {
                              "name": "api",
                              "type": "STRING"
                            },
                            {
                              "name": "resourcePath",
                              "type": "STRING"
                            },
                            {
                              "name": "method",
                              "type": "STRING"
                            },
                            {
                              "name": "version",
                              "type": "STRING"
                            },
                            {
                              "name": "request",
                              "type": "INT"
                            },
                            {
                              "name": "requestTime",
                              "type": "LONG"
                            },
                            {
                              "name": "userId",
                              "type": "STRING"
                            },
                            {
                              "name": "tenantDomain",
                              "type": "STRING"
                            },
                            {
                              "name": "hostName",
                              "type": "STRING"
                            },
                            {
                              "name": "apiPublisher",
                              "type": "STRING"
                            },
                            {
                              "name": "applicationName",
                              "type": "STRING"
                            },
                            {
                              "name": "applicationId",
                              "type": "STRING"
                            },
                            {
                              "name": "userAgent",
                              "type": "STRING"
                            },
                            {
                              "name": "tier",
                              "type": "STRING"
                            },
                            {
                              "name": "throttledOut",
                              "type": "BOOL"
                            }
                          ]
                        }
                                                  
    </stream>
  </streams>
</templateDomain>
